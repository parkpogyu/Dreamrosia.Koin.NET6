1. 슈퍼유저 권한 부여

==> sudo vi /etc/sudoers

fastlane ALL=(ALL:ALL)ALL

==> sudo usermod -a -G sudo fastlane

==========================================================
2. 시스템 업데이드 
==> sudo apt-get update
==> sudo apt-get upgrade

==========================================================
3. network IP 고정
==> sudo vi /etc/netplan/00-installer-config.yaml
 network:
     ethernets:
       enp3s0:
         addresses:
         - 192.168.0.xx/24
         gateway4: 192.168.0.1
         nameservers:
           addresses: [168.126.63.1,168.126.63.2]
    version: 2

==> sudo netplan apply

==========================================================
4. vi 설정 

==> sudo vi /etc/vim/vimrc

  if has("syntax")
      set hlsearch
      set nu
      set autoindent
      set ts=4
      set sts=4
      set cindent
      set laststatus=2
      set shiftwidth=4
      set showmatch
      set smartcase
      set smarttab
      set smartindent
      set ruler
    syntax on
  endif
 
==========================================================
5. timezone 설정
==> sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime

==========================================================
6. 언어변경
==> sudo apt-get install language-pack-ko

==> sudo vi /etc/default/locale
LANG="ko_KR.UTF-8"
LANGUAGE="ko_KR:ko"

==========================================================
7. net-tools 설치

==> sudo apt install net-tools

==========================================================
8. MariaDB 설치
==> sudo apt install mariadb-server
==> sudo mysql_secure_installation

8.1 root 계정 원격 접속
==> sudo vi /etc/mysql/mariadb.conf.d/50-server.cnf
bind-address	  = 0.0.0.0

==> sudo mysql -u root -p
MariaDB> INSERT INTO mysql.user (host,user,authentication_string,ssl_cipher, x509_issuer, x509_subject) VALUES ('192.168.0.%','root',password('totoro79'),'','','');
GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.0.%' IDENTIFIED BY 'totoro79';
FLUSH PRIVILEGES;

update mysql.user set grant_priv = 'Y' where host ='192.168.0.%' ;

8.2 mariadb 설정
==> sudo vi /etc/mysql/my.cnf
[client]
# 문자셋
default-character-set = utf8mb4 
#data 디렉토리 변경
#socket=/mnt/db/mysql/mysql.sock

[mysql]
# 문자셋
default-character-set = utf8mb4

[mysqldump] 
# 문자셋
default-character-set = utf8mb4

[mysqld]
# 문자셋
character-set-server=utf8mb4 
collation-server=utf8mb4_general_ci 
skip-character-set-client-handshake
#data 디렉토리 변경
#datadir=/mnt/db/mysql
#socket=/mnt/db/mysql/mysql.sock
#테이블명 소문자 변경
lower_case_table_names=1

==> sudo systemctl restart mariadb

8.3 data 디렉토리 변경
==> sudo systemctl stop mariadb
==> sudo rsync -av /var/lib/mysql /mnt/db/
==> sudo chown -R mysql:mysql /mnt/db/mysql/mysql

8.4 fastlane 사용자 생성
8.5 fastlane database 생성
8.6 fastlane database 데이터 입력

==========================================================
9. .NET runtime 설치

==> wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
==> sudo dpkg -i packages-microsoft-prod.deb
rm packages-microsoft-prod.deb

9.1 .NET 5.0  설치
==> sudo apt-get update; \
  sudo apt-get install -y apt-transport-https && \
  sudo apt-get update && \
  sudo apt-get install -y aspnetcore-runtime-5.0

9.2 .NET 6.0  설치
==> sudo apt-get update; \
  sudo apt-get install -y apt-transport-https && \
  sudo apt-get update && \
  sudo apt-get install -y aspnetcore-runtime-6.0


9.3 설치 확인
==> dotnet --list-runtimes

==========================================================
10. NGINX 설치
==> sudo apt install nginx

==========================================================
11 Let's Encrypt 설치 (SSL 보안)

==> sudo apt-get update
==> sudo apt-get install software-properties-common
==> sudo add-apt-repository universe
==> sudo apt-get update
==> sudo apt install python3-certbot-nginx -y
==> #sudo certbot --nginx --agree-tos --redirect --hsts --staple-ocsp --email mjtobi@gmail.com -d dreamrosia.co.kr

11.1 NGINX 설정 방식 
==> sudo certbot --nginx -d dreamrosia.co.kr -d www.dreamrosia.co.kr

11.2. DNS 설정방식
==> sudo certbot certonly -d dreamrosia.co.kr --manual --preferred-challenges dns
    가비아 DNS변경
	type:TXT, 호스트: _acme-challenge	, 값/위치: 위 명령어 출력 코드 입력
	==> Press Enter to Continue <-- Enter 입력
    ==> /etc/letsencrypt/live 폴더 확인	
	==> 업데이트인 경우 
	==> sudo nginx -s reload
	
11.3. 인증서 확인
==> sudo certbot certificates

11.4. 인증서 갱신
==> sudo certbot renew --dry-run

11.5. 인증서 자동 갱신
==> sudo crontab -e 
# Automatically Renew Let’s Encrypt Certificates
# every 2 months
0 0 1 */2 * /usr/bin/certbot renew --quiet


==========================================================
12. fastlane-server 서비스 파일 작성

==> sudo vi /etc/systemd/system/fastlane-server.service
[Unit]
Description=fastlane-server

[Service]
WorkingDirectory=/home/fastlane/www/server
ExecStart=/usr/bin/dotnet /home/fastlane/www/server/Dreamrosia.Koin.Server.dll
Restart=always
# Restart service after 10 seconds if the dotnet service crashes:
RestartSec=10
KillSignal=SIGINT
SyslogIdentifier=fastlane-server
User=fastlane
#Environment=ASPNETCORE_ENVIRONMENT=Production
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target

12.1 파일 구조
     /home/fastlane
	 - www
	   - 1_stop_server.sh
	   - 2_backup_server.sh
	   - 3_unzip_publish.sh
	   - 4_rsync_server.sh
	   - 5_start_server.sh
	   - server
	   - backup
	   - deploy
	     - Publish (자동생성)
         - Publish.zip
12.2 fastlane-server 파일 압축 해제
==> ./3_unzip_publish.sh
==> ./4_rsync_server.sh

12.3 fastlane-server 서비스 등록
==> sudo systemctl enable /etc/systemd/system/fastlane-server.service

12.4 fastlane-server 서비스 실행
==> sudo systemctl start fastlane-server.service

12.5 서비스 테스트
==> curl http://localhost/api/terminal/miningbots/test


==========================================================
13.1 NGINX 설정
==> sudo vi /etc/nginx/sites-available/default

map $http_upgrade $connection_upgrade {
	default Upgrade;
	''      close;
}

geo $remote_client { 
	default 0; 
	127.0.0.1 2; 
	192.168.0.0/24 1; 
	::1 2; 
}

server {
    if ($host = dreamrosia.co.kr) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	#listen 80 default_server;
	#listen [::]:80 default_server;
	listen 80;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name dreamrosia.co.kr;

	location / {

		proxy_pass         http://localhost:5000;
		proxy_http_version 1.1;
		proxy_set_header   Upgrade $http_upgrade;
		proxy_set_header   Connection $connection_upgrade;
		proxy_set_header   Host $host;
		proxy_cache_bypass $http_upgrade;
		proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header   X-Forwarded-Proto $scheme;
		proxy_buffer_size       128k;
		proxy_buffers           4 256k;
		proxy_busy_buffers_size 256k;

		set $is_redirect_val 1;

		if ($remote_client = 1 ) {
			set $is_redirect_val 0;
		}

		if ($remote_client = 2 ) {
			set $is_redirect_val 0;
		}

		if ($is_redirect_val = 1) {
			return 301 https://$server_name$request_uri;
		}
	}
}

server {
	# SSL configuration
	#
	listen 443 ssl http2 default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name dreamrosia.co.kr;
    ssl_certificate /etc/letsencrypt/live/dreamrosia.co.kr/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/dreamrosia.co.kr/privkey.pem; # managed by Certbot
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		proxy_pass         http://localhost:5000;
		proxy_http_version 1.1;
		proxy_set_header   Upgrade $http_upgrade;
		proxy_set_header   Connection $connection_upgrade;
		proxy_set_header   Host $host;
		proxy_cache_bypass $http_upgrade;
		proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header   X-Forwarded-Proto $scheme;
		proxy_buffer_size       128k;
		proxy_buffers           4 256k;
		proxy_busy_buffers_size 256k;
	}
}

		
==> sudo nginx -t (설정파일 검증)
==> sudo nginx -s reload
 
=========================================================================
테스트 주의 사항
- Web Test 주의 사항
 * 모든 브라우저 종료 후 테스트 
   -> Clinet-side 디버그 안되는 경우 발생
   
=========================================================================
Real > Test
