@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader AssemblyLoader

<Error>
    <Router AppAssembly="@typeof(Program).Assembly"
            OnNavigateAsync="OnNavigateAsync"
            AdditionalAssemblies="_lazyLoadedAssemblies">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <Login />
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <CascadingAuthenticationState>
                <LayoutView Layout="@typeof(NotFoundLayout)">
                    <p>
                        @(_localizer["Not found address"])
                    </p>
                </LayoutView>
            </CascadingAuthenticationState>
        </NotFound>
    </Router>
</Error>

@code
{
    private readonly List<Assembly> _lazyLoadedAssemblies = new List<Assembly>();

    private async Task OnNavigateAsync(NavigationContext context)
    {
        if (context.Path == "fetchdata")
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "Weather.dll" });

            var appeneds = (from lt in assemblies
                            from rt in _lazyLoadedAssemblies.Where(f => f.FullName.Equals(lt.FullName)).DefaultIfEmpty()
                            where rt is null
                            select lt).ToArray();

            _lazyLoadedAssemblies.AddRange(appeneds);
        }
    }
}